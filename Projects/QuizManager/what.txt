- yarn
-express
-typescript


-what is REST, How, Why.?
-//End Point

mydome/user/
----get: Give users detail

mydome/user/<userid>
---POST: req.data=>> create user

mydome/user/
---PUT: req.data==>update user details

mydome/user
---PATHC: req.data==> modify

modify/user/<id>
==>DELETE: Delete this user

--> Request
----> Code


// Response

--------------------------------------------------------

-mongoDB (offline / online)
   ---- aggregate
   ---- insert:
   
-mongoose(oom)

--NodeJS ->> mongoDB : connectionString
--IP whiteListing
--How to intract with mongoDB and precution
--schema
--> archtecture -> name, email, password

--model
->name:User:users

================
->Response - interface
--response format fix
-postion collection and saving examples
-different routes for user module
-dyanmic parameter values
-req.body
-req.params
-req.query
-async await
-what is BSON
-projection

=================
part -3
- issue: regular build on development
-ts-node install
- yarn ts-node
-REPL -link

=====================
Nodemon
-build effor reduced
-server started automatically
-juster execute node
==============================

password : Encryption
ec6 video: object key value;

why not to encode base64 or some encryption which can decrypt
bcrypt for encryption password
how to verify the password for login

1: why we use JWT and what is secret?

2: secret ko environment me rakh sakte hain?
=======================================
-break code -> divided user and auth routes
-authentication and authorization
-middleware add in .post or .get() methods on routers before forwarding request to controller
-promise link

next() -- in middleware
middleware -- routes --->>middlewareY>>> controller
middlewareY ---->> authentication :: JWT
-- how to send token jwt from postman (or with request) in authorization
-- how to fetch it.
-- how to decode it 
-- how to apply authorization

-> error TS2329: Propely 'userId' doesnot exit on type (global decleration)

=========================================================

1. interface mergin

2. class- inheritance

3. error handling in typescript




